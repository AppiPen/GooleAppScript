{"files":[{"id":"3c7d8b64-c31b-4c00-9090-f6f8eb532176","name":"Code","type":"server_js","source":"//Function called from the web app url\nfunction doGet(e) {\n  //Call the main function\n  var status \u003d main();\n  if(status \u003d\u003d true){\n     return HtmlService.createHtmlOutput(\"Created new folder\");\n  }\n  return HtmlService.createHtmlOutput(\"Folder already exists\");\n}\n\n//Main function that calls all other functions\nfunction main() {\n  //If the folder does not already exists, make it\n  var folderName \u003d \"My Google Sheets\";\n  var fileName \u003d \"My Tracker\";\n  var exists \u003d folderExists(folderName);\n  if(exists \u003d\u003d false){\n    var folder \u003d createFolder(folderName);\n    var file \u003d createFile(fileName);\n    moveFile(file, folder);\n    makeCalendarEvent(file);\n    return true;\n  }\n  return false;\n}\n\n//Make the project folder\nfunction createFolder(folderName) {  \n  if(folderExists(folderName) \u003d\u003d false){\n    //Make a new folder for your google sheets\n     var folder \u003d DriveApp.createFolder(folderName);\n     return folder;\n     //Logger.log(\"URL: \" + folder.getUrl());  //This is a helpful debugging script\n  }\n}\n\n//See if the folder already exisits\nfunction folderExists(folderName){\n  //Get a list of all folder in your drive account\n  var folders \u003d DriveApp.getFolders();\n  //Look at each folder in the list\n  while (folders.hasNext()) {\n    var folder \u003d folders.next();\n    //If the folder has the same name as the one we want to make\n    if(folder.getName() \u003d\u003d folderName)\n    {\n      //Return true to indicate it already exists\n      return true;\n    }\n  }\n  //Return true to indicate it does NOT already exists\n  return false;\n}\n\n//Make the google sheet file\nfunction createFile(fileName){\n   //Create a file \n   var sheet \u003d SpreadsheetApp.create(fileName);  //The sheet variable here is the variable for the spreedsheet, not just a tab, but works in the 1st tab be default\n  \n   //Set Column Headers\n   sheet.appendRow([\u0027Item\u0027,\t\u0027Calories\u0027,\t\u0027Cost\u0027, \u0027Trash Produced \\n (square inches)\u0027, \u0027Comments\u0027]);\n   var headers \u003d sheet.getRange(\"A1:E1\");\n   headers.setBackground(\"#0D59DC\");\n   headers.setFontColor(\"White\");\n   headers.setFontWeight(\"bold\");\n  \n   //Add ingredients\n   sheet.appendRow([\u0027Chicken thigh X 1\u0027,\t\u0027125\u0027,\t\u0027$1.00\u0027, \u00271.2\u0027]);\n   sheet.appendRow([\u0027Tortilla X 1 medium\u0027,\t\u0027170\u0027,\t\u0027$.20\u0027, \u0027.1\u0027]);\n   sheet.appendRow([\u0027Tomatoe X 1 medium\u0027,\t\u002725\u0027,\t\u0027$0.75\u0027, \u00270\u0027]);\n   sheet.appendRow([\u0027Onion (Half Cup)\u0027,\t\u002725\u0027,\t\u0027$0.20\u0027, \u00270\u0027]);\n   sheet.appendRow([\u0027Spinich (Handfull)\u0027,\t\u002730\u0027,\t\u0027$.75\u0027, \u00271.2\u0027]);\n   sheet.appendRow([\u0027Balsamic Vinigrett (Tablespoon)\u0027,\t\u002730\u0027,\t\u0027$0.10\u0027, \u00270.7\u0027, \u0027Get the one with figgs\u0027]);\n   sheet.appendRow([\u0027Honey Mustard (tablespoon)\u0027,\t\u002730\u0027,\t\u0027$0.10\u0027, \u00270.07\u0027]);\n   sheet.appendRow([\u0027Salt\u0027,\t\u0027125\u0027,\t\u0027$1.00\u0027, \u00271.2\u0027]);\n   sheet.appendRow([\u0027Pepper\u0027,\t\u00275\u0027,\t\u0027$0.05\u0027, \u00270.14\u0027]);\n   sheet.appendRow([\u0027Red Pepper\u0027,\t\u00275\u0027,\t\u0027$0.05\u0027, \u00270.14\u0027]);\n  \t\t\t\t\t\t\t\t\n   //Set tab name for tracking food items\n   sheet.getActiveSheet().setName(\"Food Items\");\n  \n   // Freezes the first row\n   sheet.setFrozenRows(1);\n  \n   //Set column width\n   sheet.getActiveSheet().setColumnWidths(1, 7, 150);\n\n   //Make a new tab for tracking meals\n   var mealSheet \u003d sheet.insertSheet();  //This is now the active sheet\n   mealSheet.setName(\"Meal Tracker\");\n\n   //set Column headers\n   mealSheet.appendRow([\u0027\u0027,\t\u0027Food Item\u0027, \u0027Calories\u0027, \u0027Portion\u0027, \u0027Total Calories\u0027]); //I could use sheet because sheet is the active sheet and mealsheet aftering being insterted looks to be the active sheet, but thats confusing\n   headers \u003d mealSheet.getRange(\"B1:E1\");  //Notice we don\u0027t need to declare the variable here because we have already declared it once\n   headers.setBackground(\"#0D59DC\");\n   headers.setFontColor(\"White\");\n   headers.setFontWeight(\"bold\");\n  \n   //Set Igrediant Column and set portions to 1 by default  //Make this a challenge section for people to do based on existing source code\n   mealSheet.appendRow([\u0027Ingredient 1\u0027, \u0027\u0027, \u0027\u0027, 1]); //The reason for the [] is because this function expects and option that contains strings, so even though we only use one string we sitll need it\n   mealSheet.appendRow([\u0027Ingredient 2\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 3\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 4\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 5\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 6\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 7\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 8\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 9\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Ingredient 10\u0027, \u0027\u0027, \u0027\u0027, 1]);\n   mealSheet.appendRow([\u0027Total\u0027]);\n  \n   //Set headers for ingrediants //Make this a challenge section for people to do based on existing source code\n   headers \u003d mealSheet.getRange(\"A2:A12\");\n   headers.setBackground(\"#0D59DC\");\n   headers.setFontColor(\"White\");\n   headers.setFontWeight(\"bold\");\n   headers.setWrap(true);\n  \n   //Set data validation\n   var cell \u003d mealSheet.getRange(\u0027B2:B11\u0027);\n   var range \u003d sheet.getSheets()[0].getRange(\"$A$2:A\"); //Goofy line because can\u0027t just lookup by sheet, have to get it by order in the list\n   var rule \u003d SpreadsheetApp.newDataValidation().requireValueInRange(range).build();\n   cell.setDataValidation(rule);\n  \n   //Set conditional formatting to look for duplicate ingredients\n   var range \u003d mealSheet.getRange(\"B2:B11\");\n   var rule \u003d SpreadsheetApp.newConditionalFormatRule()\n    .whenFormulaSatisfied(\"\u003dCOUNTIF(B:B,B2)\u003e1\")\n    .setBackground(\"#FFA4A4\")\n    .setRanges([range])\n    .build();\n   var rules \u003d mealSheet.getConditionalFormatRules();\n   rules.push(rule);\n   mealSheet.setConditionalFormatRules(rules);\n  \n   //Set calculation formula for portions\n   var cell \u003d mealSheet.getRange(\"E2:E11\");\n   cell.setFormula(\"\u003dC2*D2\");\n  \n   //Set calculation formula for totals\n   var cell \u003d mealSheet.getRange(\"E12\");\n   cell.setFormula(\"\u003dSUM(E2:E11)\");\n \n   //Set lookup formula for lookingup calories\n   var cell \u003d mealSheet.getRange(\"C2:C11\");\n   cell.setFormula(\"\u003dIF(B2\u003d\\\"\\\", \\\"\\\", (VLOOKUP(B2,\u0027Food Items\u0027!$A$2:$B,2, False)))\"); //Notice we use \\ as an escape character\n\n   return sheet;\n}\n\n//Move File to the folder\nfunction moveFile(file, folder){\n   //Copy the sheet into the folder and remove the current sheet; unfortunatly there is no copy method available\n   var sheet \u003d DriveApp.getFileById(file.getId());\n   DriveApp.getFolderById(folder.getId()).addFile(sheet)\n   DriveApp.getRootFolder().removeFile(sheet);\n}\n\n//Make a calendar event\nfunction makeCalendarEvent(file){ \n   //Get date string of noon today\n   var now \u003d new Date();\n   var startString \u003d Utilities.formatDate(now, \"EST\", \u0027MMMM dd, yyyy 12:00:00 Z\u0027);\n   var endString \u003d Utilities.formatDate(now, \"EST\", \u0027MMMM dd, yyyy 12:30:00 Z\u0027);\n   \n   //Creates an event series for updating resume, taking place every day for 2 days with the URL of out sheet\n   var eventSeries \u003d CalendarApp.getDefaultCalendar().createEventSeries(\"Track Meals\", new Date(startString),new Date(endString), CalendarApp.newRecurrence().addDailyRule());\n   eventSeries.setDescription(file.getUrl());\n }\n\n\n\n\n\n\n"},{"id":"b6c80989-5ced-47d8-a01c-89c7530769d8","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n  },\n  \"webapp\": {\n    \"access\": \"ANYONE\",\n    \"executeAs\": \"USER_ACCESSING\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\"\n}"}]}